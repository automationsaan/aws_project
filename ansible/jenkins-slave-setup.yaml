# Jenkins Slave Setup Playbook
# This playbook provisions a Jenkins build agent with Java, Maven, Docker, and Docker Buildx.
# It ensures the Jenkins agent user (e.g., 'ubuntu') has Docker access and reboots the system if needed.

---
- hosts: jenkins-slave
  become: yes
  tasks:

    # Update the apt package index to ensure latest package info
    - name: Update Ubuntu repo and cache
      apt:
        update_cache: yes
        force_apt_get: yes
        cache_valid_time: 3600

    # Install Java 21 and fontconfig (required for Maven and Jenkins)
    - name: Install OpenJDK 21 JDK and fontconfig
      apt:
        name:
          - fontconfig
          - openjdk-21-jdk
        state: present

    # Download Maven 3.9.9 binary
    - name: Download Maven packages
      get_url:
        url: https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
        dest: /opt/apache-maven-3.9.9-bin.tar.gz

    # Extract Maven to /opt
    - name: Extract Maven packages
      unarchive:
        src: /opt/apache-maven-3.9.9-bin.tar.gz
        dest: /opt/
        remote_src: yes

    # Install Docker
    - name: Install Docker
      apt:
        name: docker.io
        state: present

    # Start Docker service immediately
    - name: Start Docker service
      service:
        name: docker
        state: started

    # Refresh system facts to ensure Docker group is recognized
    - name: Refresh facts after Docker install
      setup:

    # Ensure Jenkins user exists (optional, for flexibility)
    - name: Ensure jenkins user exists
      user:
        name: jenkins
        state: present

    # Add Jenkins user to docker group (if used)
    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes
      register: jenkins_docker_group

    # Reboot if Jenkins user group membership changed
    - name: Reboot if Jenkins group membership changed
      reboot:
        msg: "Reboot to apply docker group membership for Jenkins user"
        pre_reboot_delay: 5
        post_reboot_delay: 30
        reboot_timeout: 600
      when: jenkins_docker_group.changed

    # Restart Jenkins service if it exists (optional)
    - name: Restart Jenkins agent service
      service:
        name: jenkins
        state: restarted
      when: ansible_facts.services['jenkins.service'] is defined

    # Install Docker Buildx plugin for advanced Docker builds
    - name: Install Docker Buildx plugin system-wide
      shell: |
        set -e
        mkdir -p /usr/libexec/docker/cli-plugins
        BUILDX_URL="https://github.com/docker/buildx/releases/download/v0.13.1/buildx-v0.13.1.linux-amd64"
        curl -sSL $BUILDX_URL -o /usr/libexec/docker/cli-plugins/docker-buildx
        chmod +x /usr/libexec/docker/cli-plugins/docker-buildx
      args:
        executable: /bin/bash
      register: buildx_install
      changed_when: buildx_install.rc == 0

    # Verify Docker Buildx installation
    - name: Verify Docker Buildx installation
      command: docker buildx version
      register: buildx_version
      changed_when: false
      failed_when: buildx_version.rc != 0

    # Enable Docker BuildKit for better performance and caching
    - name: Enable Docker BuildKit
      lineinfile:
        path: /etc/environment
        line: DOCKER_BUILDKIT=1
        create: yes
      notify: Restart Docker

    # Enable Docker to start on boot
    - name: Enable Docker on boot
      service:
        name: docker
        enabled: yes

    # ✅ NEW: Add ubuntu user to docker group (unconditionally)
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
      register: ubuntu_docker_group

    # ✅ NEW: Reboot if ubuntu user group membership changed
    - name: Reboot if ubuntu group membership changed
      reboot:
        msg: "Reboot to apply docker group membership for ubuntu user"
        pre_reboot_delay: 5
        post_reboot_delay: 30
        reboot_timeout: 600
      when: ubuntu_docker_group.changed

    # Install kubectl (Kubernetes CLI) for managing EKS clusters
    - name: Download kubectl binary
      get_url:
        url: https://dl.k8s.io/release/v1.30.1/bin/linux/amd64/kubectl  # Download the latest stable kubectl
        dest: /tmp/kubectl
        mode: '0755'

    - name: Make kubectl executable
      file:
        path: /tmp/kubectl
        mode: '0755'  # Ensure the binary is executable
        state: file

    - name: Move kubectl to /usr/local/bin
      command: mv /tmp/kubectl /usr/local/bin/kubectl  # Place kubectl in system PATH
      args:
        creates: /usr/local/bin/kubectl
      become: yes

    - name: Ensure kubectl is in PATH and executable
      command: kubectl version --client  # Verify kubectl installation
      register: kubectl_version
      changed_when: false
      failed_when: kubectl_version.rc != 0

    # Download AWS CLI v2 installer (zip archive)
    - name: Download AWS CLI v2 installer
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip  # Download the latest AWS CLI v2
        dest: /tmp/awscliv2.zip
        mode: '0644'

    # Ensure unzip is installed (required to extract AWS CLI installer)
    - name: Install unzip (required for AWS CLI installer)
      apt:
        name: unzip
        state: present

    # Extract AWS CLI installer from the downloaded zip file
    - name: Unzip AWS CLI installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp/
        remote_src: yes

    # Run the AWS CLI installer script to install or update AWS CLI v2
    - name: Install or update AWS CLI v2
      shell: |
        /tmp/aws/install --update  # Install or update AWS CLI to the latest version
      args:
        creates: /usr/local/bin/aws
      become: yes

    # Verify AWS CLI installation and version
    - name: Verify AWS CLI installation
      command: aws --version  # Confirm AWS CLI is installed and in PATH
      register: awscli_version
      changed_when: false
      failed_when: awscli_version.rc != 0

    # Install Helm (Kubernetes package manager)
    - name: Download Helm install script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0755'

    - name: Run Helm install script
      shell: /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm
      become: yes

    - name: Verify Helm installation
      command: helm version --short
      register: helm_version
      changed_when: false
      failed_when: helm_version.rc != 0

    # Add stable Helm repository and update repo cache
    - name: Add stable Helm repository
      command: helm repo add stable https://charts.helm.sh/stable
      register: helm_repo_add
      changed_when: helm_repo_add.rc == 0
      failed_when: helm_repo_add.rc != 0

    - name: Update Helm repositories
      command: helm repo update
      register: helm_repo_update
      changed_when: helm_repo_update.rc == 0
      failed_when: helm_repo_update.rc != 0

    # Add Bitnami Helm repository for MySQL
    - name: Add Bitnami Helm repository
      command: helm repo add bitnami https://charts.bitnami.com/bitnami
      register: helm_repo_add_bitnami
      changed_when: helm_repo_add_bitnami.rc == 0
      failed_when: helm_repo_add_bitnami.rc != 0

    - name: Update Helm repositories (after adding Bitnami)
      command: helm repo update
      register: helm_repo_update_bitnami
      changed_when: helm_repo_update_bitnami.rc == 0
      failed_when: helm_repo_update_bitnami.rc != 0

    # Install MySQL using Bitnami Helm chart
    - name: Install MySQL using Bitnami Helm chart
      command: helm install demo-mysql bitnami/mysql --namespace automationsaan --set auth.rootPassword=changeme --set primary.persistence.enabled=false
      register: helm_mysql_install
      changed_when: helm_mysql_install.rc == 0
      failed_when: helm_mysql_install.rc != 0

    # Pull the MySQL Helm chart package to local
    - name: Pull bitnami/mysql Helm chart package to local
      command: helm pull bitnami/mysql
      register: helm_mysql_pull
      changed_when: helm_mysql_pull.rc == 0
      failed_when: helm_mysql_pull.rc != 0

  handlers:
    # Restart Docker if BuildKit or config changes
    - name: Restart Docker
      service:
        name: docker
        state: restarted
